#include <netinet/in.h> 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <unistd.h>

#define PORT 5700

int main() {
    int server_fd, new_socket;
    ssize_t valread;
    struct sockaddr_in address;
    socklen_t addrsize = sizeof(address);
    char buffer[1024] = {0};
    char* hello = "Hello from server";

    // Creazione della socket
    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }

    // Configurazione dell'indirizzo del server
    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;
    address.sin_port = htons(PORT);

    // Binding della socket all'indirizzo
    if (bind(server_fd, (struct sockaddr*)&address, sizeof(address)) < 0) {
        perror("Bind failed");
        exit(EXIT_FAILURE);
    }

    // Messa in ascolto
    if (listen(server_fd, 1) < 0) {
        perror("Listen failed");
        exit(EXIT_FAILURE);
    }

    printf("Server in ascolto sulla porta %d...\n", PORT);

    // Accettazione di una connessione
    if ((new_socket = accept(server_fd, (struct sockaddr*)&address, &addrsize)) < 0) {
        perror("Accept failed");
        exit(EXIT_FAILURE);
    }

    // Lettura del messaggio dal client
    valread = read(new_socket, buffer, sizeof(buffer) - 1);
    if (valread > 0) {
        buffer[valread] = '\0';  // Assicura che la stringa sia terminata correttamente
        printf("Messaggio ricevuto: %s\n", buffer);
    }

    // Invio del messaggio di risposta
    send(new_socket, hello, strlen(hello), 0);
    printf("Messaggio di risposta inviato\n");

    // Chiusura delle socket
    close(new_socket);
    close(server_fd);

    return 0;
}
