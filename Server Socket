#include <netinet/in.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <unistd.h>

// Definisco la porta 
#define PORT 5000

int main(int argc, char const* argv[])
{

    int server_fd, new_socket;
    ssize_t valread;
    struct sockaddr_in address;
    socklen_t addrsize = sizeof(address);
    char buffer[1024] = { 0 };
    char* hello = "Hello from server";

    // Creo la socket da cui ascolto di tipo IPv4 TCP
    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
        perror("socket failed");
        exit(EXIT_FAILURE);
    }
    
    // Inizializzo i campi della struct che costituisce l'indirzzo TCP
    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY; // Local host
    address.sin_port = htons(PORT);

    // Assegno alla socket creata l'indirizzo TCP
    if (bind(server_fd, (struct sockaddr*)&address, sizeof(address)) < 0) {
        perror("bind failed");
        exit(EXIT_FAILURE);
    }
    
    // Mi metto in ascolto di qualcuno che vuole comunicare con me. Se non ci sono connessioni rimango in attesa
    if (listen(server_fd, 1) < 0) {
        perror("listen");
        exit(EXIT_FAILURE);
    }
    
    // Creo una seconda socket di appoggio perche la prima mi serve per stare in ascolto a tentativi di connessioni
    if ((new_socket = accept(server_fd, (struct sockaddr*)&address,&addrsize) < 0)) {
        perror("accept");
        exit(EXIT_FAILURE);
    }
  
    valread = read(new_socket, buffer, 1024 - 1); 
    printf("%s\n", buffer);
    
    send(new_socket, hello, strlen(hello), 0);
    printf("Hello message sent\n");

    // Chiudo la socket di connessione con il client
    close(new_socket);
  
    // Chiudo la socket di ascolto
    close(server_fd);
    return 0;
}
