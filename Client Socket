#include <arpa/inet.h>  // Per inet_pton
#include <netinet/in.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <unistd.h>

#define PORT 5700

void createSocket(int *fd);
void connection(int fd, char addrsIP[]);
void comunicate(int fd);

int main(int argc, char *argv[]) {
    int client_fd;

    // Creazione della socket
    createSocket(&client_fd);

    // Connessione al server
    connection(client_fd, "127.0.0.1");

    // Comunicazione con il server
    comunicate(client_fd);

    // Chiusura della socket
    close(client_fd);
    return 0;
}

void createSocket(int *fd) {
    if ((*fd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
        perror("Errore nella creazione della socket");
        exit(EXIT_FAILURE);
    }
}

void connection(int fd, char addrsIP[]) {
    int status;
    struct sockaddr_in address;
    socklen_t addrsize = sizeof(address);

    // Inizializzo i campi della struct
    address.sin_family = AF_INET;
    address.sin_port = htons(PORT);

    if (inet_pton(AF_INET, addrsIP, &address.sin_addr) <= 0) {
        perror("Indirizzo non valido o non supportato");
        exit(EXIT_FAILURE);
    }

    if ((status = connect(fd, (struct sockaddr*)&address, addrsize)) < 0) {
        perror("Connessione fallita");
        exit(EXIT_FAILURE);
    }
}

void comunicate(int fd) {
    char buffer[1024] = {0};
    char *hello = "Ciao, sono il client!";

    // Invio del messaggio al server
    send(fd, hello, strlen(hello), 0);
    printf("Messaggio inviato\n");

    // Ricezione della risposta dal server
    ssize_t valread = read(fd, buffer, sizeof(buffer) - 1);
    if (valread > 0) {
        buffer[valread] = '\0';  // Assicura che la stringa sia terminata correttamente
        printf("Risposta dal server: %s\n", buffer);
    } else {
        printf("Nessuna risposta dal server\n");
    }
}
