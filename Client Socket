#include <arpa/inet.h>
#include <netinet/in.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <unistd.h>

#define PORT 5700

// Buffer statici
char sendUser[100];
char destUser[100];

// Prototipi
void createSocket(int *fd);
void connection(int fd, char addrsIP[]);
void comunicate(int fd);
void comunicateUser(int fd);

int main(int argc, char *argv[]) {
    int client_fd;

    printf("Inserisci il tuo username: ");
    scanf("%s", sendUser);
    getchar(); // Pulisce il newline rimasto

    createSocket(&client_fd);
    connection(client_fd, "127.0.0.1");
    comunicateUser(client_fd);
    comunicate(client_fd);

    close(client_fd);
    return 0;
}

void createSocket(int *fd) {
    if ((*fd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
        perror("Errore nella creazione della socket");
        exit(EXIT_FAILURE);
    }
}

void connection(int fd, char addrsIP[]) {
    struct sockaddr_in address;
    socklen_t addrsize = sizeof(address);

    address.sin_family = AF_INET;
    address.sin_port = htons(PORT);

    if (inet_pton(AF_INET, addrsIP, &address.sin_addr) <= 0) {
        perror("Indirizzo non valido o non supportato");
        exit(EXIT_FAILURE);
    }

    if (connect(fd, (struct sockaddr *)&address, addrsize) < 0) {
        perror("Connessione fallita");
        exit(EXIT_FAILURE);
    }
}

void comunicate(int fd) {
    char buffer[1024] = {0};
    char message[1024];
    ssize_t valread;

    while (1) {
        printf("[%s]: ", sendUser);
        fgets(message, sizeof(message), stdin);
        message[strcspn(message, "\n")] = 0;

        if (strcmp(message, "exit") == 0) {
            printf("Disconnessione...\n");
            break;
        }

        send(fd, message, strlen(message), 0);

        valread = read(fd, buffer, sizeof(buffer) - 1);
        if (valread > 0) {
            buffer[valread] = '\0';
            printf("[%s]: %s\n", destUser, buffer);
        } else {
            printf("Connessione chiusa dal server.\n");
            break;
        }
    }
}

void comunicateUser(int fd) {
    // Invio del mio username
    send(fd, sendUser, strlen(sendUser), 0);

    // Ricezione dello username del server
    ssize_t valread = read(fd, destUser, sizeof(destUser) - 1);
    if (valread > 0) {
        destUser[valread] = '\0';
    }
}
